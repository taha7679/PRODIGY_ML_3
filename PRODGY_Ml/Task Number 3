import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from tqdm import tqdm
import zipfile

# Step 1: Extract and Load Images
dataset_path = "archive.zip"  # Path to the Kaggle dataset ZIP file
extracted_folder = "dataset/"

# Extract zip file
if not os.path.exists(extracted_folder):
    with zipfile.ZipFile(dataset_path, 'r') as zip_ref:
        zip_ref.extractall(extracted_folder)

# Define image folder paths
data_dir = os.path.join(extracted_folder, "train")  # Adjust as per dataset structure
categories = ['cat', 'dog']

# Step 2: Preprocess Images
IMG_SIZE = 64  # Resize images to 64x64

def load_images_and_labels(data_dir, categories):
    data = []
    labels = []
    for category in categories:
        path = os.path.join(data_dir, category)
        class_num = categories.index(category)  # 0=cat, 1=dog
        
        for img_name in tqdm(os.listdir(path)):
            try:
                img_path = os.path.join(path, img_name)
                img = cv2.imread(img_path, cv2.IMREAD_COLOR)  # Load image
                img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))  # Resize
                img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
                data.append(img.flatten())  # Flatten to 1D
                labels.append(class_num)
            except Exception as e:
                print(f"Error loading image {img_name}: {e}")
    return np.array(data), np.array(labels)

print("Loading images...")
X, y = load_images_and_labels(data_dir, categories)

# Step 3: Split Dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train SVM
print("Training SVM...")
svm = SVC(kernel='rbf', C=1.0, gamma='scale')
svm.fit(X_train, y_train)

# Step 5: Evaluate Model
print("Evaluating SVM...")
y_pred = svm.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f"Accuracy: {accuracy * 100:.2f}%")
print("Classification Report:")
print(classification_report(y_test, y_pred))
